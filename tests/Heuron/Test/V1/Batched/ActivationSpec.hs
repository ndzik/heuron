{-# LANGUAGE DataKinds #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE ScopedTypeVariables #-}

module Heuron.Test.V1.Batched.ActivationSpec where

import Control.Lens (Ixed (ix), (^?!))
import Data.Foldable
import Data.Vector as Vec (Vector, fromList, zip)
import GHC.TypeLits
import Heuron.V1 (mkM', prettyMatrix, prettyVector)
import Heuron.V1.Batched (ActivationFunction (activation), Differentiable (derivative), Softmax (Softmax))
import Linear (Additive (liftI2), V1 (V1), scaled, (!*!), (!-!))
import Linear.Matrix (transpose)
import Linear.V
import Text.Printf (printf)

activationSpec :: IO ()
activationSpec = do
  let tests =
        [ softmaxSpec,
          concreteSpec
        ]
  sequence_ tests

softmaxSpec :: IO ()
softmaxSpec = do
  samples <- mkM' @2 @3 [[4.8, 1.21, 2.385], [4.8, 1.21, 20000.385]]
  let result = activation Softmax samples
  print "softmaxSpec activation result:"
  putStrLn $ printf "%s" (prettyMatrix result)
  samples <- mkM' @1 @3 [[0.7, 0.1, 0.2]]
  let result = dS <$> samples
  print "softmaxSpec derivative result:"
  putStrLn $ printf "%s" (prettyMatrix result)

dS :: (KnownNat n) => V n Double -> V n Double
dS sample = sum <$> sXδ !-! sjXsk
  where
    mSample = V1 sample
    tmSample = transpose mSample
    sjXsk = tmSample !*! mSample
    sXδ = scaled sample

concreteSpec :: IO ()
concreteSpec = do
  samples <-
    mkM' @10 @32
      [ [12941.338727716471, 12571.899062153927, 14661.788324867308, 11908.940483188933, 13897.532641059748, 13280.245246251181, 11898.469909566218, 12114.319535574643, 12662.805696067939, 15333.697652406106, 12620.885663995818, 13826.253305017768, 14041.227894568761, 12811.345149226418, 14014.287819399126, 13031.955943585655, 11078.729175304534, 13885.329354646126, 13637.930932548197, 16203.337587817787, 11379.635462538414, 11720.50932717659, 11040.746759762542, 14612.326470377608, 13376.17458086297, 13716.606644385722, 14493.683579728395, 13401.479913222254, 15907.88858881975, 13462.521319348609, 13726.774897894633, 13921.037879767302],
        [14746.679160568552, 14300.089570510532, 16676.237072299788, 13559.520170586791, 15827.916436658878, 15106.837857146782, 13548.472100826064, 13780.577114315076, 14422.340697967895, 17446.01416197185, 14366.49748127789, 15741.032076817031, 15991.398851332118, 14561.373792351575, 15949.614791543723, 14819.290247891091, 12614.10341660273, 15796.891709826772, 15518.144609280613, 18430.058005439645, 12944.576193788287, 13334.930643657444, 12554.083684463847, 16645.53758152404, 15226.157729227692, 15615.418538374342, 16495.18706744948, 15257.536206166615, 18096.57702513007, 15305.832722133358, 15613.24145275448, 15841.684432618427],
        [9250.21031728499, 8964.438078784426, 10450.15740216435, 8495.765296152198, 9927.79935619579, 9479.29706024902, 8492.219839066785, 8657.471483906285, 9043.33724387268, 10940.336345022524, 8999.256491530123, 9882.567735714023, 10036.312880364496, 9130.289786510868, 9998.653375900238, 9292.926876157087, 7900.394839888834, 9901.933471296543, 9733.114420147382, 11553.058621878272, 8116.430228592502, 8356.527245796142, 7868.371673808361, 10446.8626720619, 9550.269807712608, 9787.560522795526, 10341.661942168677, 9572.327613989026, 11339.191762483817, 9598.816011228912, 9790.956760743886, 9937.224617092934],
        [8226.698203174667, 7983.423878252164, 9304.876165509375, 7562.170483654989, 8816.716124117613, 8430.442411934673, 7556.10420581837, 7688.240835607402, 8037.684612950792, 9733.709440103501, 8019.071223051082, 8785.844720143836, 8916.964613732933, 8121.282373225496, 8896.95202212105, 8269.854904913454, 7039.664200265879, 8813.065075283273, 8670.68920431623, 10280.89392682294, 7218.727839841203, 7453.779542600912, 6999.451389608587, 9279.63859872447, 8489.9167913641, 8695.862942615682, 9205.723725631386, 8504.804191093106, 10079.936966263047, 8552.866855179607, 8723.223867147839, 8834.540269997266],
        [11099.041971669822, 10766.453494150759, 12568.279006752142, 10209.37278321976, 11917.212341379936, 11389.627235253653, 10198.494030570278, 10391.883228781464, 10861.326470317901, 13134.07697030469, 10814.669122981266, 11851.050668678969, 12041.219327408402, 10976.827307462603, 11996.741518497878, 11164.52844462101, 9489.327600744637, 11887.458303522539, 11671.845308132222, 13883.88591147859, 9747.957163068457, 10039.933738489339, 9460.277235276788, 12529.768856688155, 11473.802096436719, 11765.401756980016, 12429.582985604617, 11495.28629231384, 13637.56948202776, 11527.076184849418, 11765.640187401277, 11928.355207517157],
        [14017.250557555633, 13607.432095858716, 15867.726992775304, 12891.680111648679, 15048.805729823172, 14370.44746477424, 12876.990749424689, 13103.940500757806, 13705.193243934105, 16597.137317398967, 13657.129501543472, 14970.801513966459, 15201.183088630602, 13860.78122805311, 15161.160732383376, 14098.21601525603, 11995.947157030876, 15018.003849923167, 14762.339905884497, 17533.103952069512, 12311.208851254782, 12682.943934416664, 11947.65478424274, 15821.516608198724, 14478.275537856758, 14845.038355900157, 15686.905977245748, 14510.559363701217, 17209.96086019335, 14568.220442035778, 14863.62583427463, 15063.183069587772],
        [8586.45466086791, 8335.210561877871, 9722.816895091293, 7902.661970095522, 9210.934732961305, 8804.123632146433, 7888.816557383747, 8042.02435337722, 8407.075079878223, 10163.694914971695, 8370.42017753982, 9167.0756267498, 9310.333438190986, 8497.237148697766, 9282.301977607482, 8640.121193549518, 7342.1877936591945, 9202.926817859614, 9032.452723055292, 10744.755924232768, 7541.307293421065, 7777.346143787848, 7319.49549454293, 9690.390994995885, 8877.440947314892, 9095.605381579713, 9623.492358908343, 8878.208963931907, 10555.60834228921, 8924.557977668825, 9104.274487130559, 9226.076899337737],
        [16870.68138875126, 16379.92489160845, 19100.246751001327, 15522.326349533954, 18111.523354591416, 17295.90214981209, 15504.833208139875, 15781.817217735419, 16498.69014952058, 19972.960835237653, 16446.25548183977, 18016.22795933406, 18295.809264837928, 16682.441689985604, 18259.276667801187, 16964.884992766307, 14437.300422879396, 18078.121705782578, 17764.85646684201, 21105.69279184875, 14809.392802677752, 15278.121768169505, 14375.958350484278, 19044.94702545229, 17429.936808471586, 17861.397978636433, 18890.06473071366, 17458.28951346933, 20712.328370394418, 17539.08470087367, 17889.52524750153, 18129.31613207453],
        [5312.078925386856, 5162.382391823069, 6017.000422591322, 4892.249732885569, 5702.268507206343, 5446.513665847638, 4882.873143607495, 4976.022406468178, 5207.016776098345, 6294.643037519047, 5177.720238365828, 5669.374881531197, 5761.118464513804, 5259.304584355616, 5743.3873371533045, 5345.822503163251, 4547.238663238213, 5700.203560970639, 5589.130400126805, 6653.043477510541, 4670.422319850914, 4815.575399417629, 4529.767165215689, 6000.3230545177785, 5496.464088698436, 5630.0305102715765, 5956.696077074508, 5491.781838043828, 6538.80773138087, 5523.063105472253, 5634.070024835513, 5708.710356057406],
        [10498.964212670293, 10183.376294811003, 11887.639199374898, 9657.41900825977, 11272.192275130901, 10777.935141054455, 9654.640473362315, 9831.33045354877, 10259.145759516194, 12424.550972877638, 10235.17964256154, 11219.155851958083, 11396.26421144787, 10383.28503402905, 11351.680925054437, 10562.277461012172, 8984.69149974315, 11236.086919219928, 11052.140142329481, 13127.507852330611, 9214.77382290581, 9500.98765144906, 8950.676872109847, 11852.826533682031, 10843.006510514551, 11122.654908189013, 11756.840370839678, 10876.22967880469, 12880.671018287774, 10911.659927737055, 11128.182904257374, 11278.521100810727]
      ]
  let result = activation Softmax samples
      maxValues = maximum <$> samples
      expInputs = (exp <$>) <$> samples
      indexedSamples :: Vec.Vector (Int, V 32 Double)
      indexedSamples = Vec.zip (fromList [0 .. 9]) (toVector samples)
      minusInputs =
        fromVector' @10 $
          ( \(idx, vs) ->
              fmap
                ( \v ->
                    let maxValue = (maxValues ^?! ix idx)
                     in v - maxValue
                )
                vs
          )
            <$> indexedSamples
      expInputsMinus =
        fromVector' @10 $
          ( \(idx, vs) ->
              fmap
                ( \v ->
                    let maxValue = (maxValues ^?! ix idx)
                     in exp (v - maxValue)
                )
                vs
          )
            <$> indexedSamples

      sumExpInputs = sum <$> expInputsMinus
      normalizedActivation = liftI2 (\ei vs -> (\v -> if v == 0 then 0 else v / ei) <$> vs) sumExpInputs expInputsMinus
  putStrLn $ printf "MAXIMUM:\n%s" (prettyVector maxValues)
  putStrLn $ printf "expInputs:\n%s" (prettyMatrix expInputs)
  putStrLn $ printf "minusInputs:\n%s" (prettyMatrix minusInputs)
  putStrLn $ printf "expInputsMinus:\n%s" (prettyMatrix expInputsMinus)
  putStrLn $ printf "sumExpInputs:\n%s" (prettyVector sumExpInputs)
  putStrLn $ printf "normalizedActivation:\n%s" (prettyMatrix normalizedActivation)
  print "softmaxSpec concrete example activation result:"
  putStrLn $ printf "%s" (prettyMatrix result)

  let result = derivative Softmax samples samples
  print "softmaxSpec concrete derivative result:"
  putStrLn $ printf "%s" (prettyMatrix' result)

prettyMatrix' :: (KnownNat b, KnownNat n) => V b (V n (V n Double)) -> String
prettyMatrix' = unlines . toList . (prettyMatrix <$>)

fromVector' :: forall n a. (KnownNat n) => Vector a -> V n a
fromVector' v = case fromVector @n v of
  Just v' -> v'
  Nothing -> error "fromVector'"
